{-# LANGUAGE DataKinds #-}
{-# LANGUAGE DeriveAnyClass #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE GADTs #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE TypeApplications #-}
{-# OPTIONS_GHC -fno-warn-missing-export-lists #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- | Generated by Haskell protocol buffer compiler. DO NOT EDIT!
module Worker where
import qualified Prelude as Hs
import qualified Proto3.Suite.Class as HsProtobuf
import qualified Proto3.Suite.DotProto as HsProtobufAST
import qualified Proto3.Suite.JSONPB as HsJSONPB
import Proto3.Suite.JSONPB ((.=), (.:))
import qualified Proto3.Suite.Types as HsProtobuf
import qualified Proto3.Wire as HsProtobuf
import qualified Proto3.Wire.Decode as HsProtobuf
       (Parser, RawField)
import qualified Control.Applicative as Hs
import Control.Applicative ((<*>), (<|>), (<$>))
import qualified Control.DeepSeq as Hs
import qualified Control.Monad as Hs
import qualified Data.ByteString as Hs
import qualified Data.Coerce as Hs
import qualified Data.Int as Hs (Int16, Int32, Int64)
import qualified Data.List.NonEmpty as Hs (NonEmpty(..))
import qualified Data.Map as Hs (Map, mapKeysMonotonic)
import qualified Data.Proxy as Proxy
import qualified Data.String as Hs (fromString)
import qualified Data.Text.Lazy as Hs (Text)
import qualified Data.Vector as Hs (Vector)
import qualified Data.Word as Hs (Word16, Word32, Word64)
import qualified GHC.Enum as Hs
import qualified GHC.Generics as Hs
import qualified Google.Protobuf.Wrappers.Polymorphic as HsProtobuf
       (Wrapped(..))
import qualified Unsafe.Coerce as Hs
import Network.GRPC.HighLevel.Generated as HsGRPC
import Network.GRPC.HighLevel.Client as HsGRPC
import Network.GRPC.HighLevel.Server as HsGRPC hiding (serverLoop)
import Network.GRPC.HighLevel.Server.Unregistered as HsGRPC
       (serverLoop)
 
data ExecuteCommand = ExecuteCommand{executeCommandArgv ::
                                     Hs.Vector Hs.ByteString,
                                     executeCommandEnv ::
                                     Hs.Vector Worker.ExecuteCommand_EnvironmentEntry}
                    deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic)
 
instance Hs.NFData ExecuteCommand
 
instance HsProtobuf.Named ExecuteCommand where
        nameOf _ = (Hs.fromString "ExecuteCommand")
 
instance HsProtobuf.HasDefault ExecuteCommand
 
instance HsProtobuf.Message ExecuteCommand where
        encodeMessage _
          ExecuteCommand{executeCommandArgv = executeCommandArgv,
                         executeCommandEnv = executeCommandEnv}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce @(Hs.Vector Hs.ByteString)
                      @(HsProtobuf.UnpackedVec (HsProtobuf.Bytes Hs.ByteString))
                      (executeCommandArgv))),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   (Hs.coerce @(Hs.Vector Worker.ExecuteCommand_EnvironmentEntry)
                      @(HsProtobuf.NestedVec Worker.ExecuteCommand_EnvironmentEntry)
                      (executeCommandEnv)))])
        decodeMessage _
          = (Hs.pure ExecuteCommand) <*>
              (HsProtobuf.coerceOver
                 @(HsProtobuf.UnpackedVec (HsProtobuf.Bytes Hs.ByteString))
                 @(Hs.Vector Hs.ByteString)
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
              <*>
              (HsProtobuf.coerceOver
                 @(HsProtobuf.NestedVec Worker.ExecuteCommand_EnvironmentEntry)
                 @(Hs.Vector Worker.ExecuteCommand_EnvironmentEntry)
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 2)))
        dotProto _
          = [(HsProtobufAST.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobufAST.Repeated HsProtobufAST.Bytes)
                (HsProtobufAST.Single "argv")
                []
                ""),
             (HsProtobufAST.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobufAST.Repeated
                   (HsProtobufAST.Named (HsProtobufAST.Single "EnvironmentEntry")))
                (HsProtobufAST.Single "env")
                []
                "")]
 
instance HsJSONPB.ToJSONPB ExecuteCommand where
        toJSONPB (ExecuteCommand f1 f2)
          = (HsJSONPB.object
               ["argv" .=
                  (Hs.coerce @(Hs.Vector Hs.ByteString)
                     @(HsProtobuf.UnpackedVec (HsProtobuf.Bytes Hs.ByteString))
                     (f1)),
                "env" .=
                  (Hs.coerce @(Hs.Vector Worker.ExecuteCommand_EnvironmentEntry)
                     @(HsProtobuf.NestedVec Worker.ExecuteCommand_EnvironmentEntry)
                     (f2))])
        toEncodingPB (ExecuteCommand f1 f2)
          = (HsJSONPB.pairs
               ["argv" .=
                  (Hs.coerce @(Hs.Vector Hs.ByteString)
                     @(HsProtobuf.UnpackedVec (HsProtobuf.Bytes Hs.ByteString))
                     (f1)),
                "env" .=
                  (Hs.coerce @(Hs.Vector Worker.ExecuteCommand_EnvironmentEntry)
                     @(HsProtobuf.NestedVec Worker.ExecuteCommand_EnvironmentEntry)
                     (f2))])
 
instance HsJSONPB.FromJSONPB ExecuteCommand where
        parseJSONPB
          = (HsJSONPB.withObject "ExecuteCommand"
               (\ obj ->
                  (Hs.pure ExecuteCommand) <*>
                    (HsProtobuf.coerceOver
                       @(HsProtobuf.UnpackedVec (HsProtobuf.Bytes Hs.ByteString))
                       @(Hs.Vector Hs.ByteString)
                       (obj .: "argv"))
                    <*>
                    (HsProtobuf.coerceOver
                       @(HsProtobuf.NestedVec Worker.ExecuteCommand_EnvironmentEntry)
                       @(Hs.Vector Worker.ExecuteCommand_EnvironmentEntry)
                       (obj .: "env"))))
 
instance HsJSONPB.ToJSON ExecuteCommand where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON ExecuteCommand where
        parseJSON = HsJSONPB.parseJSONPB
 
-- instance HsJSONPB.ToSchema ExecuteCommand where
--         declareNamedSchema _
--           = do let declare_argv = HsJSONPB.declareSchemaRef
--                executeCommandArgv <- declare_argv Proxy.Proxy
--                let declare_env = HsJSONPB.declareSchemaRef
--                executeCommandEnv <- declare_env Proxy.Proxy
--                let _ = Hs.pure ExecuteCommand <*>
--                          (HsProtobuf.coerceOver
--                             @(HsProtobuf.UnpackedVec (HsProtobuf.Bytes Hs.ByteString))
--                             @(Hs.Vector Hs.ByteString)
--                             (HsJSONPB.asProxy declare_argv))
--                          <*>
--                          (HsProtobuf.coerceOver
--                             @(HsProtobuf.NestedVec Worker.ExecuteCommand_EnvironmentEntry)
--                             @(Hs.Vector Worker.ExecuteCommand_EnvironmentEntry)
--                             (HsJSONPB.asProxy declare_env))
--                Hs.return
--                  (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
--                                          Hs.Just "ExecuteCommand",
--                                        HsJSONPB._namedSchemaSchema =
--                                          Hs.mempty{HsJSONPB._schemaParamSchema =
--                                                      Hs.mempty{HsJSONPB._paramSchemaType =
--                                                                  Hs.Just HsJSONPB.SwaggerObject},
--                                                    HsJSONPB._schemaProperties =
--                                                      HsJSONPB.insOrdFromList
--                                                        [("argv", executeCommandArgv),
--                                                         ("env", executeCommandEnv)]}})
--
data ExecuteCommand_EnvironmentEntry = ExecuteCommand_EnvironmentEntry{executeCommand_EnvironmentEntryKey
                                                                       :: Hs.ByteString,
                                                                       executeCommand_EnvironmentEntryValue
                                                                       :: Hs.ByteString}
                                     deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic)
 
instance Hs.NFData ExecuteCommand_EnvironmentEntry
 
instance HsProtobuf.Named ExecuteCommand_EnvironmentEntry where
        nameOf _ = (Hs.fromString "ExecuteCommand_EnvironmentEntry")
 
instance HsProtobuf.HasDefault ExecuteCommand_EnvironmentEntry
 
instance HsProtobuf.Message ExecuteCommand_EnvironmentEntry where
        encodeMessage _
          ExecuteCommand_EnvironmentEntry{executeCommand_EnvironmentEntryKey
                                            = executeCommand_EnvironmentEntryKey,
                                          executeCommand_EnvironmentEntryValue =
                                            executeCommand_EnvironmentEntryValue}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce @(Hs.ByteString) @(HsProtobuf.Bytes Hs.ByteString)
                      (executeCommand_EnvironmentEntryKey))),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   (Hs.coerce @(Hs.ByteString) @(HsProtobuf.Bytes Hs.ByteString)
                      (executeCommand_EnvironmentEntryValue)))])
        decodeMessage _
          = (Hs.pure ExecuteCommand_EnvironmentEntry) <*>
              (HsProtobuf.coerceOver @(HsProtobuf.Bytes Hs.ByteString)
                 @(Hs.ByteString)
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
              <*>
              (HsProtobuf.coerceOver @(HsProtobuf.Bytes Hs.ByteString)
                 @(Hs.ByteString)
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 2)))
        dotProto _
          = [(HsProtobufAST.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobufAST.Prim HsProtobufAST.Bytes)
                (HsProtobufAST.Single "key")
                []
                ""),
             (HsProtobufAST.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobufAST.Prim HsProtobufAST.Bytes)
                (HsProtobufAST.Single "value")
                []
                "")]
 
instance HsJSONPB.ToJSONPB ExecuteCommand_EnvironmentEntry where
        toJSONPB (ExecuteCommand_EnvironmentEntry f1 f2)
          = (HsJSONPB.object
               ["key" .=
                  (Hs.coerce @(Hs.ByteString) @(HsProtobuf.Bytes Hs.ByteString)
                     (f1)),
                "value" .=
                  (Hs.coerce @(Hs.ByteString) @(HsProtobuf.Bytes Hs.ByteString)
                     (f2))])
        toEncodingPB (ExecuteCommand_EnvironmentEntry f1 f2)
          = (HsJSONPB.pairs
               ["key" .=
                  (Hs.coerce @(Hs.ByteString) @(HsProtobuf.Bytes Hs.ByteString)
                     (f1)),
                "value" .=
                  (Hs.coerce @(Hs.ByteString) @(HsProtobuf.Bytes Hs.ByteString)
                     (f2))])
 
instance HsJSONPB.FromJSONPB ExecuteCommand_EnvironmentEntry where
        parseJSONPB
          = (HsJSONPB.withObject "ExecuteCommand_EnvironmentEntry"
               (\ obj ->
                  (Hs.pure ExecuteCommand_EnvironmentEntry) <*>
                    (HsProtobuf.coerceOver @(HsProtobuf.Bytes Hs.ByteString)
                       @(Hs.ByteString)
                       (obj .: "key"))
                    <*>
                    (HsProtobuf.coerceOver @(HsProtobuf.Bytes Hs.ByteString)
                       @(Hs.ByteString)
                       (obj .: "value"))))
 
instance HsJSONPB.ToJSON ExecuteCommand_EnvironmentEntry where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON ExecuteCommand_EnvironmentEntry where
        parseJSON = HsJSONPB.parseJSONPB
 
-- instance HsJSONPB.ToSchema ExecuteCommand_EnvironmentEntry where
--         declareNamedSchema _
--           = do let declare_key = HsJSONPB.declareSchemaRef
--                executeCommand_EnvironmentEntryKey <- declare_key Proxy.Proxy
--                let declare_value = HsJSONPB.declareSchemaRef
--                executeCommand_EnvironmentEntryValue <- declare_value Proxy.Proxy
--                let _ = Hs.pure ExecuteCommand_EnvironmentEntry <*>
--                          (HsProtobuf.coerceOver @(HsProtobuf.Bytes Hs.ByteString)
--                             @(Hs.ByteString)
--                             (HsJSONPB.asProxy declare_key))
--                          <*>
--                          (HsProtobuf.coerceOver @(HsProtobuf.Bytes Hs.ByteString)
--                             @(Hs.ByteString)
--                             (HsJSONPB.asProxy declare_value))
--                Hs.return
--                  (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
--                                          Hs.Just "ExecuteCommand_EnvironmentEntry",
--                                        HsJSONPB._namedSchemaSchema =
--                                          Hs.mempty{HsJSONPB._schemaParamSchema =
--                                                      Hs.mempty{HsJSONPB._paramSchemaType =
--                                                                  Hs.Just HsJSONPB.SwaggerObject},
--                                                    HsJSONPB._schemaProperties =
--                                                      HsJSONPB.insOrdFromList
--                                                        [("key", executeCommand_EnvironmentEntryKey),
--                                                         ("value",
--                                                          executeCommand_EnvironmentEntryValue)]}})
--
data ExecuteResponse = ExecuteResponse{executeResponseExitCode ::
                                       Hs.Int32,
                                       executeResponseStderr :: Hs.Text}
                     deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic)
 
instance Hs.NFData ExecuteResponse
 
instance HsProtobuf.Named ExecuteResponse where
        nameOf _ = (Hs.fromString "ExecuteResponse")
 
instance HsProtobuf.HasDefault ExecuteResponse
 
instance HsProtobuf.Message ExecuteResponse where
        encodeMessage _
          ExecuteResponse{executeResponseExitCode = executeResponseExitCode,
                          executeResponseStderr = executeResponseStderr}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   executeResponseExitCode),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   (Hs.coerce @(Hs.Text) @(HsProtobuf.String Hs.Text)
                      (executeResponseStderr)))])
        decodeMessage _
          = (Hs.pure ExecuteResponse) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (HsProtobuf.coerceOver @(HsProtobuf.String Hs.Text) @(Hs.Text)
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 2)))
        dotProto _
          = [(HsProtobufAST.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobufAST.Prim HsProtobufAST.Int32)
                (HsProtobufAST.Single "exit_code")
                []
                ""),
             (HsProtobufAST.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobufAST.Prim HsProtobufAST.String)
                (HsProtobufAST.Single "stderr")
                []
                "")]
 
instance HsJSONPB.ToJSONPB ExecuteResponse where
        toJSONPB (ExecuteResponse f1 f2)
          = (HsJSONPB.object
               ["exit_code" .= f1,
                "stderr" .=
                  (Hs.coerce @(Hs.Text) @(HsProtobuf.String Hs.Text) (f2))])
        toEncodingPB (ExecuteResponse f1 f2)
          = (HsJSONPB.pairs
               ["exit_code" .= f1,
                "stderr" .=
                  (Hs.coerce @(Hs.Text) @(HsProtobuf.String Hs.Text) (f2))])
 
instance HsJSONPB.FromJSONPB ExecuteResponse where
        parseJSONPB
          = (HsJSONPB.withObject "ExecuteResponse"
               (\ obj ->
                  (Hs.pure ExecuteResponse) <*> obj .: "exit_code" <*>
                    (HsProtobuf.coerceOver @(HsProtobuf.String Hs.Text) @(Hs.Text)
                       (obj .: "stderr"))))
 
instance HsJSONPB.ToJSON ExecuteResponse where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON ExecuteResponse where
        parseJSON = HsJSONPB.parseJSONPB
 
-- instance HsJSONPB.ToSchema ExecuteResponse where
--         declareNamedSchema _
--           = do let declare_exit_code = HsJSONPB.declareSchemaRef
--                executeResponseExitCode <- declare_exit_code Proxy.Proxy
--                let declare_stderr = HsJSONPB.declareSchemaRef
--                executeResponseStderr <- declare_stderr Proxy.Proxy
--                let _ = Hs.pure ExecuteResponse <*>
--                          HsJSONPB.asProxy declare_exit_code
--                          <*>
--                          (HsProtobuf.coerceOver @(HsProtobuf.String Hs.Text) @(Hs.Text)
--                             (HsJSONPB.asProxy declare_stderr))
--                Hs.return
--                  (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
--                                          Hs.Just "ExecuteResponse",
--                                        HsJSONPB._namedSchemaSchema =
--                                          Hs.mempty{HsJSONPB._schemaParamSchema =
--                                                      Hs.mempty{HsJSONPB._paramSchemaType =
--                                                                  Hs.Just HsJSONPB.SwaggerObject},
--                                                    HsJSONPB._schemaProperties =
--                                                      HsJSONPB.insOrdFromList
--                                                        [("exit_code", executeResponseExitCode),
--                                                         ("stderr", executeResponseStderr)]}})
--
data ExecuteCancel = ExecuteCancel{}
                   deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic)
 
instance Hs.NFData ExecuteCancel
 
instance HsProtobuf.Named ExecuteCancel where
        nameOf _ = (Hs.fromString "ExecuteCancel")
 
instance HsProtobuf.HasDefault ExecuteCancel
 
instance HsProtobuf.Message ExecuteCancel where
        encodeMessage _ ExecuteCancel{} = (Hs.mconcat [])
        decodeMessage _ = (Hs.pure ExecuteCancel)
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB ExecuteCancel where
        toJSONPB (ExecuteCancel) = (HsJSONPB.object [])
        toEncodingPB (ExecuteCancel) = (HsJSONPB.pairs [])
 
instance HsJSONPB.FromJSONPB ExecuteCancel where
        parseJSONPB
          = (HsJSONPB.withObject "ExecuteCancel"
               (\ obj -> (Hs.pure ExecuteCancel)))
 
instance HsJSONPB.ToJSON ExecuteCancel where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON ExecuteCancel where
        parseJSON = HsJSONPB.parseJSONPB
 
-- instance HsJSONPB.ToSchema ExecuteCancel where
--         declareNamedSchema _
--           = do Hs.return
--                  (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
--                                          Hs.Just "ExecuteCancel",
--                                        HsJSONPB._namedSchemaSchema =
--                                          Hs.mempty{HsJSONPB._schemaParamSchema =
--                                                      Hs.mempty{HsJSONPB._paramSchemaType =
--                                                                  Hs.Just HsJSONPB.SwaggerObject},
--                                                    HsJSONPB._schemaProperties =
--                                                      HsJSONPB.insOrdFromList []}})
--
newtype ExecuteEvent = ExecuteEvent{executeEventData ::
                                    Hs.Maybe ExecuteEventData}
                       deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic)
 
instance Hs.NFData ExecuteEvent
 
instance HsProtobuf.Named ExecuteEvent where
        nameOf _ = (Hs.fromString "ExecuteEvent")
 
instance HsProtobuf.HasDefault ExecuteEvent
 
instance HsProtobuf.Message ExecuteEvent where
        encodeMessage _ ExecuteEvent{executeEventData = executeEventData}
          = (Hs.mconcat
               [case executeEventData of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             ExecuteEventDataCommand y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                                     (Hs.coerce @(Hs.Maybe Worker.ExecuteCommand)
                                        @(HsProtobuf.Nested Worker.ExecuteCommand)
                                        (Hs.Just y)))
                             ExecuteEventDataCancel y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                                     (Hs.coerce @(Hs.Maybe Worker.ExecuteCancel)
                                        @(HsProtobuf.Nested Worker.ExecuteCancel)
                                        (Hs.Just y)))])
        decodeMessage _
          = (Hs.pure ExecuteEvent) <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 1),
                   (Hs.pure (Hs.fmap ExecuteEventDataCommand)) <*>
                     (HsProtobuf.coerceOver @(HsProtobuf.Nested Worker.ExecuteCommand)
                        @(Hs.Maybe Worker.ExecuteCommand)
                        (HsProtobuf.decodeMessageField))),
                  ((HsProtobuf.FieldNumber 2),
                   (Hs.pure (Hs.fmap ExecuteEventDataCancel)) <*>
                     (HsProtobuf.coerceOver @(HsProtobuf.Nested Worker.ExecuteCancel)
                        @(Hs.Maybe Worker.ExecuteCancel)
                        (HsProtobuf.decodeMessageField)))])
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB ExecuteEvent where
        toJSONPB (ExecuteEvent f1_or_f2)
          = (HsJSONPB.object
               [(let encodeData
                       = (case f1_or_f2 of
                              Hs.Just (ExecuteEventDataCommand f1)
                                -> (HsJSONPB.pair "command" f1)
                              Hs.Just (ExecuteEventDataCancel f2) -> (HsJSONPB.pair "cancel" f2)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("data" .= (HsJSONPB.objectOrNull [encodeData] options)) options
                       else encodeData options)])
        toEncodingPB (ExecuteEvent f1_or_f2)
          = (HsJSONPB.pairs
               [(let encodeData
                       = (case f1_or_f2 of
                              Hs.Just (ExecuteEventDataCommand f1)
                                -> (HsJSONPB.pair "command" f1)
                              Hs.Just (ExecuteEventDataCancel f2) -> (HsJSONPB.pair "cancel" f2)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("data" .= (HsJSONPB.pairsOrNull [encodeData] options)) options
                       else encodeData options)])
 
instance HsJSONPB.FromJSONPB ExecuteEvent where
        parseJSONPB
          = (HsJSONPB.withObject "ExecuteEvent"
               (\ obj ->
                  (Hs.pure ExecuteEvent) <*>
                    (let parseData parseObj
                           = Hs.msum
                               [Hs.Just Hs.. ExecuteEventDataCommand <$>
                                  (HsJSONPB.parseField parseObj "command"),
                                Hs.Just Hs.. ExecuteEventDataCancel <$>
                                  (HsJSONPB.parseField parseObj "cancel"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "data") Hs.>>= (HsJSONPB.withObject "data" parseData)) <|>
                         (parseData obj))))
 
instance HsJSONPB.ToJSON ExecuteEvent where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON ExecuteEvent where
        parseJSON = HsJSONPB.parseJSONPB
 
-- instance HsJSONPB.ToSchema ExecuteEvent where
--         declareNamedSchema _
--           = do let declare_data = HsJSONPB.declareSchemaRef
--                executeEventData <- declare_data Proxy.Proxy
--                let _ = Hs.pure ExecuteEvent <*> HsJSONPB.asProxy declare_data
--                Hs.return
--                  (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
--                                          Hs.Just "ExecuteEvent",
--                                        HsJSONPB._namedSchemaSchema =
--                                          Hs.mempty{HsJSONPB._schemaParamSchema =
--                                                      Hs.mempty{HsJSONPB._paramSchemaType =
--                                                                  Hs.Just HsJSONPB.SwaggerObject},
--                                                    HsJSONPB._schemaProperties =
--                                                      HsJSONPB.insOrdFromList
--                                                        [("data", executeEventData)]}})
--
data ExecuteEventData = ExecuteEventDataCommand Worker.ExecuteCommand
                      | ExecuteEventDataCancel Worker.ExecuteCancel
                      deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic)
 
instance Hs.NFData ExecuteEventData
 
instance HsProtobuf.Named ExecuteEventData where
        nameOf _ = (Hs.fromString "ExecuteEventData")
 
-- instance HsJSONPB.ToSchema ExecuteEventData where
--         declareNamedSchema _
--           = do let declare_command = HsJSONPB.declareSchemaRef
--                executeEventDataCommand <- declare_command Proxy.Proxy
--                let _ = Hs.pure ExecuteEventDataCommand <*>
--                          HsJSONPB.asProxy declare_command
--                let declare_cancel = HsJSONPB.declareSchemaRef
--                executeEventDataCancel <- declare_cancel Proxy.Proxy
--                let _ = Hs.pure ExecuteEventDataCancel <*>
--                          HsJSONPB.asProxy declare_cancel
--                Hs.return
--                  (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
--                                          Hs.Just "ExecuteEventData",
--                                        HsJSONPB._namedSchemaSchema =
--                                          Hs.mempty{HsJSONPB._schemaParamSchema =
--                                                      Hs.mempty{HsJSONPB._paramSchemaType =
--                                                                  Hs.Just HsJSONPB.SwaggerObject},
--                                                    HsJSONPB._schemaProperties =
--                                                      HsJSONPB.insOrdFromList
--                                                        [("command", executeEventDataCommand),
--                                                         ("cancel", executeEventDataCancel)],
--                                                    HsJSONPB._schemaMinProperties = Hs.Just 1,
--                                                    HsJSONPB._schemaMaxProperties = Hs.Just 1}})
--
data Worker request response = Worker{workerExecute ::
                                      request 'HsGRPC.Normal Worker.ExecuteCommand
                                        Worker.ExecuteResponse
                                        -> Hs.IO (response 'HsGRPC.Normal Worker.ExecuteResponse),
                                      workerExec ::
                                      request 'HsGRPC.ClientStreaming Worker.ExecuteEvent
                                        Worker.ExecuteResponse
                                        ->
                                        Hs.IO
                                          (response 'HsGRPC.ClientStreaming Worker.ExecuteResponse)}
                             deriving Hs.Generic
 
workerServer ::
               Worker HsGRPC.ServerRequest HsGRPC.ServerResponse ->
                 HsGRPC.ServiceOptions -> Hs.IO ()
workerServer
  Worker{workerExecute = workerExecute, workerExec = workerExec}
  (ServiceOptions serverHost serverPort useCompression
     userAgentPrefix userAgentSuffix initialMetadata sslConfig logger
     serverMaxReceiveMessageLength serverMaxMetadataSize)
  = (HsGRPC.serverLoop
       HsGRPC.defaultOptions{HsGRPC.optNormalHandlers =
                               [(HsGRPC.UnaryHandler (HsGRPC.MethodName "/worker.Worker/Execute")
                                   (HsGRPC.convertGeneratedServerHandler workerExecute))],
                             HsGRPC.optClientStreamHandlers =
                               [(HsGRPC.ClientStreamHandler
                                   (HsGRPC.MethodName "/worker.Worker/Exec")
                                   (HsGRPC.convertGeneratedServerReaderHandler workerExec))],
                             HsGRPC.optServerStreamHandlers = [],
                             HsGRPC.optBiDiStreamHandlers = [], optServerHost = serverHost,
                             optServerPort = serverPort, optUseCompression = useCompression,
                             optUserAgentPrefix = userAgentPrefix,
                             optUserAgentSuffix = userAgentSuffix,
                             optInitialMetadata = initialMetadata, optSSLConfig = sslConfig,
                             optLogger = logger,
                             optMaxReceiveMessageLength = serverMaxReceiveMessageLength,
                             optMaxMetadataSize = serverMaxMetadataSize})
 
workerClient ::
               HsGRPC.Client ->
                 Hs.IO (Worker HsGRPC.ClientRequest HsGRPC.ClientResult)
workerClient client
  = (Hs.pure Worker) <*>
      ((Hs.pure (HsGRPC.clientRequest client)) <*>
         (HsGRPC.clientRegisterMethod client
            (HsGRPC.MethodName "/worker.Worker/Execute")))
      <*>
      ((Hs.pure (HsGRPC.clientRequest client)) <*>
         (HsGRPC.clientRegisterMethod client
            (HsGRPC.MethodName "/worker.Worker/Exec")))


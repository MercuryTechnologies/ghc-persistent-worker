module L2_2_2 where

import L1_1_1
import L1_1_2
import L1_2_1
import L1_2_2

import Language.Haskell.TH (ExpQ)
import Language.Haskell.TH.Syntax (lift)


l2_2_2_1 :: ExpQ
l2_2_2_1 = lift @_ @Int (2 + 0 + l1_1_1_1 + l1_1_1_2 + l1_1_1_3 + l1_1_1_4 + l1_1_2_1 + l1_1_2_2 + l1_1_2_3 + l1_1_2_4 + l1_2_1_1 + l1_2_1_2 + l1_2_1_3 + l1_2_1_4 + l1_2_2_1 + l1_2_2_2 + l1_2_2_3 + l1_2_2_4)

l2_2_2_2 :: ExpQ
l2_2_2_2 = lift @_ @Int (2 + 0 + l1_1_1_1 + l1_1_1_2 + l1_1_1_3 + l1_1_1_4 + l1_1_2_1 + l1_1_2_2 + l1_1_2_3 + l1_1_2_4 + l1_2_1_1 + l1_2_1_2 + l1_2_1_3 + l1_2_1_4 + l1_2_2_1 + l1_2_2_2 + l1_2_2_3 + l1_2_2_4)

l2_2_2_3 :: ExpQ
l2_2_2_3 = lift @_ @Int (2 + 0 + l1_1_1_1 + l1_1_1_2 + l1_1_1_3 + l1_1_1_4 + l1_1_2_1 + l1_1_2_2 + l1_1_2_3 + l1_1_2_4 + l1_2_1_1 + l1_2_1_2 + l1_2_1_3 + l1_2_1_4 + l1_2_2_1 + l1_2_2_2 + l1_2_2_3 + l1_2_2_4)

l2_2_2_4 :: ExpQ
l2_2_2_4 = lift @_ @Int (2 + 0 + l1_1_1_1 + l1_1_1_2 + l1_1_1_3 + l1_1_1_4 + l1_1_2_1 + l1_1_2_2 + l1_1_2_3 + l1_1_2_4 + l1_2_1_1 + l1_2_1_2 + l1_2_1_3 + l1_2_1_4 + l1_2_2_1 + l1_2_2_2 + l1_2_2_3 + l1_2_2_4)

